'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _cliEngineCommand = require('cli-engine-command');

var _cliEngineCommand2 = _interopRequireDefault(_cliEngineCommand);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _output = require('cli-engine-command/lib/output');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Autocomplete extends _cliEngineCommand2.default {

  async run() {
    if (this.config.windows) {
      this.out.error('Autocomplete is not currently supported in Windows');
      return;
    }

    const autocompletePath = _path2.default.join(this.config.dataDir, 'client', 'node_modules', 'cli-engine', 'autocomplete');
    if (this.flags.commands) {
      this.out.log(_path2.default.join(autocompletePath, 'commands'));
      return;
    }

    const shell = this.flags.shell || this.config.shell;
    if (!shell) {
      this.out.error('Error: Missing required argument shell');
      return;
    }

    switch (shell) {
      case 'bash':
        this.out.log('Symlink the autocomplete function via:');
        this.out.log();
        let fnFile = _path2.default.join(autocompletePath, 'bash', 'heroku');
        this.out.log(_output.CustomColors.cmd(`$ ln -s ${fnFile} /usr/local/etc/bash_completion.d/heroku`));
        break;
      case 'zsh':
        if (this.flags.script) {
          this.out.log(`fpath=(
  ${_path2.default.join(autocompletePath, 'zsh')}
  $fpath
);
autoload -Uz compinit;
compinit;`);
          return;
        }
        this.out.log('Add the autocomplete function to your fpath via:');
        this.out.log();
        this.out.log(_output.CustomColors.cmd(`$ echo $(heroku autocomplete --shell zsh --script) >> ~/.zshrc`));
        break;
      default:
        this.out.error(`Currently ${shell} is not a supported shell for autocomplete`);
        return;
    }
    this.out.log();
    this.out.log('Lastly, restart your shell');
  }
}
exports.default = Autocomplete;
Autocomplete.topic = 'autocomplete';
Autocomplete.description = 'autocomplete installation instructions';
Autocomplete.hidden = true;
Autocomplete.flags = {
  commands: _cliEngineCommand.flags.boolean({ hidden: true }),
  script: _cliEngineCommand.flags.boolean({ hidden: true }),
  shell: _cliEngineCommand.flags.string({ description: 'shell to use', char: 's' })
};